m<-matrix(c(1,"hong",150,2,'lee',250,3,'kim',300))
m
# matrix로 data.frame 객체 생성
m<-matrix(c(1,"hong",150,2,'lee',250,3,'kim',300),3, by=T)
m
#       [,1] [,2]   [,3]
# [1,] "1"  "hong" "150"
# [2,] "2"  "lee"  "250"
# [3,] "3"  "kim"  "300"
mdf <- data.frame(m)
mdf
source("C:/mywork/rsou/pro1/ex3dataFrame.R", encoding = 'UTF-8')
#   X1   X2  X3
# 1  1 hong 150
# 2  2  lee 250
# 3  3  kim 300
class(mdf)
m <- matrix(1:6, nrow = 3)
m
mdf <- data.frame(m)
mdf
colnames(mdf) <- c("c1","c2")
mdf
mdf$c1
mdf['c1']
mdf[,2] # 모든
mdf[1,2]
mdf[1:2,1:2]
mdf$c1 # 반환값 벡터
mdf['c1'] # 반환값 리스트
mdf$c1 # 반환값 벡터
mdf['c1'] # 반환값 리스트
mdf[,2] # 모든 행의 2번째 열만 추출
mdf[1,2]
mdf[1:2,1:2]
# Data Frames : 구조화된 데이터 오브젝트다.
# 데이터베이스의 테이블 구조와 유사, 칼럼 단위로 type이 달라도 됨
# 가장 많이 사용되는 객체 타입
# vector로 data.frame 객체 생성
no <- c(1,2,3)
name <- c("hong","lee","kim")
pay <- c(200,250,300)
df <- data.frame(no,name,pay)
df
#   no name pay
# 1  1 hong 200
# 2  2  lee 250
# 3  3  kim 300
df <- data.frame(bunho=no,irum=name,imkum=pay) # 칼럼명 주기
df
#   bunho irum imkum
# 1     1 hong   200
# 2     2  lee   250
# 3     3  kim   300
typeof(df) # "list"
class(df) #  "data.frame"
is(df) # "data.frame" "list"       "oldClass"   "vector"
df <- data.frame(irum=c('james','oscar','tom'),nai=c(33,44,22)) # 행 번호는 자동으로 매겨짐
df
#    irum nai
# 1 james  33
# 2 oscar  44
# 3   tom  22
df <- data.frame(irum=c('james','oscar','tom'),nai=c(33,44,22), row.names = c("one","two","three"))
df
#        irum nai
# one   james  33
# two   oscar  44
# three   tom  22
nrow(df)
ncol(df)
str(df)
df$irum
df$nai
summary(df)
head(df,n=2)
tail(df,n=2)
names(df) # 열 이름 확인
# matrix로 data.frame 객체 생성
m<-matrix(c(1,"hong",150,2,'lee',250,3,'kim',300),3, by=T)
m
#       [,1] [,2]   [,3]
# [1,] "1"  "hong" "150"
# [2,] "2"  "lee"  "250"
# [3,] "3"  "kim"  "300"
mdf <- data.frame(m)
mdf
#   X1   X2  X3
# 1  1 hong 150
# 2  2  lee 250
# 3  3  kim 300
class(mdf) # "data.frame"
m <- matrix(1:6, nrow = 3)
m
mdf <- data.frame(m)
mdf
colnames(mdf) <- c("c1","c2")
mdf
mdf$c1 # 반환값 벡터
mdf['c1'] # 반환값 리스트
mdf[,2] # 모든 행의 2번째 열만 추출
mdf[1,2]
mdf[1:2,1:2]
mdf[mdf$c1==2, ]
mdf
mdf[mdf$c1==2, ] # 칼럼값이 2인 것의 행이 출력
subset(mdf, c1 == 2)
mdf[mdf$c1 == 2 & md$c2 == 5,]
mdf[mdf$c1 == 2 & mdf$c2 == 5,]
subset(mdf, c1 == 2 & c2 == 5)
mdf[mdf$c1 == 2, c(1,2)]
subset(mdf, c1 ==2, select=c(1,2))
mdf
mdf$c2 <- ifelse(mdf$c2 == 4, NA, mdf$c2)
mdf
summary(mdf)
mean(mdf$c2)
mean(mdf$c2, na.rm = T)
# data.frame에 행 또는 열 추가/삭제
mdfr <- rbind(mdf,c(10,11))
mdfr
mdfr <- cbind(mdf,c3 = c("a","b","c"), c3=c("a1","b1","c1"))
mdfr
mdfc[,"c1"] <- NULL
mdfc
mdfr <- mdfr[-1]
mdfr
mdfr <- mdfr[-1,]
mdfr
mdfc[,"c1"] <- NULL
# data.frame에 행 또는 열 추가/삭제
mdfr <- rbind(mdf,c(10,11))
mdfr
mdfc <- cbind(mdf,c3 = c("a","b","c"), c3=c("a1","b1","c1"))
mdfc
mdfc[,"c1"] <- NULL
mdfc
mdfr <- mdfr[-1,]
mdfr
# data.frame 객체를 파일로 저장 후 읽기 : 속도가 빠름
df <- data.frame(eng=c(90,80,70), mat=c(100,66,88))
df
save(df, file = "dfobj.rda")
rm(df)
df
load(file = "dfobj.rda")
df
# data.frame 을 개선한 package로 data.table
install.packages("data.talbe")
# data.frame 을 개선한 package로 data.table
install.packages("data.table")
library(data.table)
dt <- as.data.table(df)
dt
# merge : 두 개 이상의 data.frame을 병합
height <- data.frame(id=c(1,2,2),h=c(180,175,178))
weight <- data.frame(id=c(1,2,3),h=c(80,75,88))
height
weight
merge(height,weight)
# merge : 두 개 이상의 data.frame을 병합
height <- data.frame(id=c(1,2,2),h=c(180,175,178))
weight <- data.frame(id=c(1,2,3),w=c(80,75,88))
height
weight
merge(height,weight)
# merge : 두 개 이상의 data.frame을 병합
height <- data.frame(id=c(1,2,2),h=c(180,175,178))
weight <- data.frame(id=c(1,2,3),w=c(80,75,88))
height
weight
merge(height,weight)
merge(weight,height)
merge(height,weight, by.x = "id")
merge(height,weight, by.x = "id", by.y = "id")
merge(height,weight,all=T)
# 그룹연산 위해 package 설치
install.packages("dplyr")
library(dplyr)
?dplyr
library(dplyr)
?dplyr
?dplyr
library(help="dplyr")
df
df <- merge(height,weight,all=T) # outer join과 비슷
df
summarise(group_by(df, id))
summarise(group_by(df, h))
# <조건1> 위 7개 벡터를 이용하여 user란 이름(변수명)으로 데이터 프레임 생성
# <연습문제4> 다음의 벡터를 컬럼으로 데이터프레임을 생성하시오.
name <- c("가인수", "유관순", "이순신", "김유신", "홍길동")
age <- c(55, 45, 45, 53, 15) # 연령
gender <- c(1, 2, 1, 1, 1)    # 1:남자, 2: 여자
job <- c("연예인", "주부", "군인", "직장인", "학생")
sat <- c(3,4,2,5,5)        # 만족도
grade <- c("C","C","A","D","A")
total <- c(44.4,28.5,43.5,NA,27.1)   # 총구매금액(NA:결측치 해결)
# <연습문제4> 다음의 벡터를 컬럼으로 데이터프레임을 생성하시오.
name <- c("가인수", "유관순", "이순신", "김유신", "홍길동")
age <- c(55, 45, 45, 53, 15) # 연령
gender <- c(1, 2, 1, 1, 1)    # 1:남자, 2: 여자
job <- c("연예인", "주부", "군인", "직장인", "학생")
sat <- c(3,4,2,5,5)        # 만족도
grade <- c("C","C","A","D","A")
total <- c(44.4,28.5,43.5,NA,27.1)   # 총구매금액(NA:결측치 해결)
# <조건1> 위 7개 벡터를 이용하여 user란 이름(변수명)으로 데이터 프레임 생성
user <- data.frame(name,age,gender,job,sat,grade,total)
user
# <조건2> 성별(gender) 변수를 이용하여 히스토그램 그리기 (hist)
hist(user$gender)
plot(user$sat)
# <조건3> user에서 짝수행만 선택해서 user2(dataframe)를 만드시오.
user2 <- user[c(2,4),]
user2
user2 <- user[seq(2,4,2),]
user2
user2 <- user[seq(2,nrow(user),2),]
user2
user2 <- user[seq(2,4,2),]
user2
user2 <- user[seq(2,nrow(user),2),]
user2
r1 <- c(100, 80, 90)
r2 <- c(90, 80, 75)
r3 <- c(86, 78, 95)
da <-data.frame(r1, r2, r3)
da
#da를 대상으로 apply()를 적용하여 행/열 방향으로 내장 함수(max,mean())를 적용하시오.
#<조건1> 행/열 방향 max()함수 적용
apply(da,1,max)
apply(da,2,max)
#<조건2> 행/열 평균 mean()함수 적용
apply(da,1,mean)
apply(da,2,mean)
round(apply(da,2,mean))
round(apply(da,2,mean),2)
kor <- data.frame(id=c(1,2), kor=c(85,75))
eng <- data.frame(id=c(1,2), eng=c(95,86))
kor
eng
score <- merge(kor,eng,by.x = id)
score <- merge(kor,eng,by.x = "id",by.y = "id")
score
# aggregate() 집계함수
score <- rbind(score, c(1,80,70))
score
score <- rbund(score, c(2,80,70))
score <- rbind(score, c(2,80,70))
score
aggreage(kor ~ id, score, sum)
aggregate(kor ~ id, score, sum)
aggregate(kor ~ id, score, sum) # (계산될 칼럼 ~ 기준 칼럼, 데이터, 함수)
aggregate(kor ~ id, score, min)
score
# 데이터 입력
# 키보드 입력
# 1. scan()
n <- scan()
n
sum(1:n)
ss<-scan(what = "") # 문자열 입력
ss
ss<-scan(what = "") # 문자열 입력
ss<-scan(what = "") # 문자열 입력
ss
# 2. 다량의 데이터를 표의 형태로 입력
df1 <- data.frame()
df1
df1 <- edit(df1)
# 2. 다량의 데이터를 표의 형태로 입력
df1 <- data.frame()
df1
df1 <- edit(df1)
df1
# 파일 읽기
# read.table() 함수
getwd()
list.dirs()
list.files()
list.dirs()
# 파일 읽기
# read.table() 함수
getwd() # 현재 경로 확인
stu <- read.table("testdata/student.txt")
stu
class(stu)
is(stu)
read.table("testdata/student.txt")
read.table("testdata/student1.txt")
read.table("testdata/student1.txt", header = T)
read.table("testdata/student2.txt", header = T, sep=";")
read.table("testdata/student2.txt", header = T, sep=";",skip = 2)
read.table("testdata/student3.txt", header = T)
read.table("testdata/student3.txt", header = T, sep = " ", na.strings = "-")
read.table("testdata/student2.txt", header = T, sep=",")
read.table("testdata/student4.txt", header = T, sep=",")
#read.csv() 함수 (comma saperate value)
read.csv("testdata/student4.txt")
#read.csv() 함수 (comma saperate value)
read.csv("testdata/student4.txt",na.strings = '-') # 기본값이 header = T
# excel 파일 읽기
install.packages("xlsx")
library(xlsx)
read.xlsx2(file = "testdata/student.xlsx", sheetIndex = 1)
read.xlsx2(file.choose(),sheetIndex = 1)
# 데이터 출력 -------------------------------------------
a <- 10 ; b <- 20; c <- a*b
cat('a * b의 결과는',c)
print('a * b의 결과는',c)# print는 인자 2개 불가능
#print('a * b의 결과는',c)# print는 인자 2개 불가능
print(C)
#print('a * b의 결과는',c)# print는 인자 2개 불가능
print(c)
# 파일로 저장
data <- read.csv("testdata/binary.csv",skip=5)
data
# 파일로 저장
data <- read.csv("testdata/binary.csv")
data
data <- head(data,5)
data
write.table(data,"output/out1.csv")
write.table(data,"output/out1.csv", row.names = FALSE) # 칼럼명 제외
write.table(data,"output/out1.csv")
write.table(data,"output/out2.csv", row.names = FALSE) # 칼럼명 제외
write.table(data,"output/out3.csv", row.names = FALSE, quote = FALSE)
name <- c("관우","장비","유비")
age <- c(35, 23, 26)
mydf <- data.frame(name,age)
mydf
write.csv(mydf,"output/csv1.csv")
write.csv(mydf,"output/csv1.csv",fileEncoding = "UTF-8")
write.csv(mydf,"output/csv2.csv", fileEncoding = "UTF-8", row.names = FALSE)
#write.table(data,"output/out1.csv")
write.table(data,"output/out1.txt")
library(x1sx)
library(xlsx)
write.xlsx(mydf,"output/exc.xlsx")
# 명목형(범주형) 변수로 도수분포표 작성
df <- read.csv("https://raw.githubusercontent.com/pykwon/Test-datas-for-R/master/ex_studentlist.csv")
df
summary(df)
str(df)
# table() 함수로 분할표 : gender, bloodtype
table(df$gender, df$bloodtype)
freq <- table(df$bloodtype)
freq
freq
rfreq <- prop.table(freq)
rfreq
rtable <- rbind(freq, rfreq)
rtable
rtable <- addmargins(rtable)
rtable
rtable <- addmargins(rtable, margin = 1) # sum 들어감, 행(2), 열(1) 합
rtable
rfreq <- prop.table(freq) # 상대도수, 결과가 비율로 출력, 전체 합 1
rfreq
rtable <- rbind(freq, rfreq)
rtable
rtable <- addmargins(rtable, margin = 1) # sum 들어감, 행(2), 열(1) 합
rtable
# 명목형(범주형) 변수로 도수분포표 작성
df <- read.csv("https://raw.githubusercontent.com/pykwon/Test-datas-for-R/master/ex_studentlist.csv")
df
summary(df) # 요약 통계
str(df) # 구조
# table() 함수로 분할표 : gender, bloodtype
table(df$gender, df$bloodtype)
#    A AB B O
# 남 1  2 3 2
# 여 2  1 1 3
freq <- table(df$bloodtype)
freq
# A AB  B  O
# 3  3  4  5
rfreq <- prop.table(freq) # 상대도수, 결과가 비율로 출력, 전체 합 1
rfreq
#         A        AB         B         O
# 0.2000000 0.2000000 0.2666667 0.3333333
rtable <- rbind(freq, rfreq)
rtable
rtable <- addmargins(rtable, margin = 1) # sum 들어감, 행(2), 열(1) 합
rtable
# 명목형(범주형) 변수로 도수분포표 작성
df <- read.csv("https://raw.githubusercontent.com/pykwon/Test-datas-for-R/master/ex_studentlist.csv")
df
summary(df) # 요약 통계
str(df) # 구조
# table() 함수로 분할표 : gender, bloodtype
table(df$gender, df$bloodtype)
#    A AB B O
# 남 1  2 3 2
# 여 2  1 1 3
freq <- table(df$bloodtype)
freq
# A AB  B  O
# 3  3  4  5
rfreq <- prop.table(freq) # 상대도수, 결과가 비율로 출력, 전체 합 1
rfreq
#         A        AB         B         O
# 0.2000000 0.2000000 0.2666667 0.3333333
rtable <- rbind(freq, rfreq)
rtable
rtable <- addmargins(rtable, margin = 2) # sum 들어감, 행(2), 열(1) 합
rtable
# 연속형 (수치형) 변수로 도수분포표 작성
df
# 연속형 (수치형) 변수로 도수분포표 작성
df
# 연속형 (수치형) 변수로 도수분포표 작성
head(df,3)
df$height
df$height # 구간(계급) 설정 - cut() 함수
factorHeight <- cut(df$height, breaks = 4)
factorHeight
freqHeight <- table(factorHeight)
freqHeight
rownames(freqHeight)[2] <- 'height'
freqHeight
factorHeight
freqHeight <- table(factorHeight)
freqHeight
rownames(freqHeight)[2] <- 'height'
freqHeight
factorHeight <- cut(df$height, breaks = 4)
factorHeight
freqHeight <- table(factorHeight)
freqHeight
freqHeight <- rbind(freqHeight, prop.table(freqHeight))
rownames(freqHeight)[2] <- 'height'
freqHeight
df$height # 구간(계급) 설정 - cut() 함수
factorHeight <- cut(df$height, breaks = 4)
factorHeight
freqHeight <- table(factorHeight)
freqHeight
freqHeight <- rbind(freqHeight, prop.table(freqHeight))
rownames(freqHeight)[1] <- '빈도수'
freqHeight
rownames(freqHeight)[1] <- '빈도수'
rownames(freqHeight)[2] <- '비율'
freqHeight
cumFreq = cumsum(freqHeight[2,]) # 누적합 연산
cumFreq
cumFreq = cumsum(freqHeight[2,]) # 누적합 연산
cumFreq
freqHeight <- rbind(freqHeight, cumFreq) # 누적 상대 도수 추가
freqHeight
freqHeight <- addmargins(freqHeight, margin = 2)
freqHeight
# 명목형(범주형) 변수로 도수분포표 작성
df <- read.csv("https://raw.githubusercontent.com/pykwon/Test-datas-for-R/master/ex_studentlist.csv")
df
summary(df) # 요약 통계
str(df) # 구조
# table() 함수로 분할표 : gender, bloodtype
table(df$gender, df$bloodtype)
#    A AB B O
# 남 1  2 3 2
# 여 2  1 1 3
freq <- table(df$bloodtype)
freq
# A AB  B  O
# 3  3  4  5
rfreq <- prop.table(freq) # 상대도수, 결과가 비율로 출력, 전체 합 1
rfreq
#         A        AB         B         O
# 0.2000000 0.2000000 0.2666667 0.3333333
rtable <- rbind(freq, rfreq)
rtable
rtable <- addmargins(rtable, margin = 2) # sum 들어감, 행(2), 열(1) 합
rtable
# 연속형 (수치형) 변수로 도수분포표 작성 : height
head(df,3)
df$height # 구간(계급) 설정 - cut() 함수
factorHeight <- cut(df$height, breaks = 4)
factorHeight
freqHeight <- table(factorHeight)
freqHeight
freqHeight <- rbind(freqHeight, prop.table(freqHeight))
rownames(freqHeight)[1] <- '빈도수'
rownames(freqHeight)[2] <- '비율'
freqHeight
cumFreq = cumsum(freqHeight[2,]) # 누적합 연산
cumFreq
freqHeight <- rbind(freqHeight, cumFreq) # 누적 상대 도수 추가
freqHeight
freqHeight <- addmargins(freqHeight, margin = 2)
freqHeight
a <- c(1,2,3,5,7,2,4,-1)
a
c <- c(TRUE,FALSE,TRUE,T,R)
c <- c(TRUE,FALSE,TRUE,T,F)
c
y <- 2022
y
y[0] # numeric(0)
y[1] # 2022 인덱스 1 부터 시작
y[2] # NA
is.vector(y) # TRUE
mode(y) # "numeric"
class(y)
typeof(y)
y <- as.integer(y)
class(y)
typeof(y)
seq(1,5) # 1부터 5까지 수열 생성, 1 2 3 4 5, 수열 생성 함수수
1:5 # 1 2 3 4 5
seq(1,10,2) # 1 3 5 7 9, 증가 값 2
seq(1,10,length.out = 4) # 1  4  7 10 ,전체 개수가 4개가 되도록 증가값 자동 결정
