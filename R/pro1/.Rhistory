for(n in i){
print(n)
}
for(su in 1:9){
res = 2*su
cat(2,'*',su,'=',res,'\n')
}
#while
i <- 0
while (i<10){
i = i+1
print(i)
}
i<- 0
while(T){
i = i+1
print(i)
if (i==5) break
}
# 함수
# 내장함수
seq(0,5,by=1.5)
# 함수
# 내장함수
seq(0,5,by=1.5)
set.seed(123)
rnorm(10,mean = 0,sd=1)
hist(rnorm(100,mean = 1,sd = 1))
runif(10,min=0,max=100)
hist(runif(1000,min=0,max=100))
sample(0:100,10)
vec <- 1:10
min(vec)
mean(vec)
quantile(vec)
table(vec) # 빈도수
abs(-5)
factorial(5)
vec <- 1:10
min(vec)
mean(vec)
quantile(vec)
table(vec) # 빈도수
abs(-5)
factorial(5)
# 사용자 정의 함수
func1 <- function(){
print("사용자 정의 함수")
}
func1()
func1()
func2(10)
func2 <- function(arg){
print("매개변수 사용")
print(arg+10)
}
func2(10)
gugu_func <- function(dan){
for(d in dan){
for(i in 1:9){
cat(d,'*',i,'=',d*i,' ')
}
cat('\n')
}
}
gugu_func(2:9)
# web scraping
install.packages("XML")
library(XML)
install.packages("httr")
library(httr)
source <- htmlParse(rawToChar(GET(url=url)$content))
url <- "https://www.melon.com/song/popup/lyricPrint.htm?songId=11111"
source <- htmlParse(rawToChar(GET(url=url)$content))
source
lyrics <- xpathSApply(source, "//div[@class='box_lyric_text']")
lyrics
lyrics <- xpathSApply(source, "//div[@class='box_lyric_text']", xmlValue)
lyrics
lyrics <- gsub("[\r\n\t]","",lyrics)
lyrics
# 다음 사이트의 뉴스 정보 제목 읽기
url <- "https://news.daum.net/"
doc <- htmlParse(rawToChar(GET(url=url)$content))
doc
news.daum.net
news.daum.net
# 다음 사이트의 뉴스 정보 제목 읽기
durl <- "https://news.daum.net/"
doc <- htmlParse(rawToChar(GET(url=durl)$content))
doc
# 다음 사이트의 뉴스 정보 제목 읽기
durl <- "https://news.daum.net/"
doc <- htmlParse(rawToChar(GET(url=durl)$content))
doc
lyrics <- xpathSApply(source, "//a[@class='link_txt']", xmlValue)
lyrics
# 다음 사이트의 뉴스 정보 제목 읽기
durl <- "https://news.daum.net/"
doc <- htmlParse(rawToChar(GET(url=durl)$content))
doc
doc <- xpathSApply(source, "//a[@class='link_txt']", xmlValue)
doc
# 다음 사이트의 뉴스 정보 제목 읽기
durl <- "https://news.daum.net/"
doc <- htmlParse(rawToChar(GET(url=durl)$content))
doc
doc <- xpathSApply(doc, "//a[@class='link_txt']", xmlValue)
doc
result <- gsub("[\r\n\t]","",doc)
result
result <- gsub("[\r\n\t]","",doc)
result <- gsub("[:punct:]","",doc) # 문장 부호 제거
result <- gsub("[:cntrl:]","",doc) # 특수 문자 제거
result <- gsub("\\d+","",doc)
result <- gsub("[\r\n\t]","",doc)
result <- gsub("[:punct:]","",doc) # 문장 부호 제거
result <- gsub("[:cntrl:]","",doc) # 특수 문자 제거
result <- gsub("\\d+","",doc) # 숫자 제거
result <- gsub("\\s+"," ",doc) # 두개이상의 공백을 공백 하나로
result
result <- gsub("[\r\n\t]","",doc)
result <- gsub("[[:punct:]]","",doc) # 문장 부호 제거
result <- gsub("[[:cntrl:]]","",doc) # 특수 문자 제거
result <- gsub("\\d+","",doc) # 숫자 제거
result <- gsub("\\s+"," ",doc) # 두개이상의 공백을 공백 하나로
result
library
library
library
library(XML)
library(methods)
xmlData <- xmlTreeParse("c:/rwork/testdata/score.xml", useInternalNodes = T)
rootNode <- xmlRoot(xmlData)
xmlData <- xmlTreeParse("c:/rwork/testdata/score.xml", useInternalNodes = T)
rootNode <- xmlRoot(xmlData)
library(XML)
library(methods)
xmlData <- xmlTreeParse("c:/rwork/testdata/score.xml", useInternalNodes = T)
rootNode <- xmlRoot(xmlData)
xmlData <- xmlTreeParse("c:/rwork/testdata/score.xml", useInternalNodes = T)
rootNode <- xmlRoot(xmlData)
xmlData <- xmlTreeParse("score.xml", useInternalNodes = T)
rootNode <- xmlRoot(xmlData)
rootNode
names <- xpathSApply(rootNode, "//name", xmlValue)
names
scores <- xpathSApply(rootNode, "//score", xmlValue)
scores
scoredf <- data.frame(names,scores)
scoredf
install.packages("rjson")
library("rjson")
result <- fromJSON(file = "json.json")
json_data_frame <- as.data.frame(result) # Convert JSON file to a data frame.
json_data_frame
;
#막대
barplot(stu$grade)
stu <- read.csv("testdata/ex_studentlist.csv")
head(stu)
names(stu)
#막대
barplot(stu$grade)
barplot(stu$grade, ylim = c(0, 5))
barplot(stu$grade, ylim = c(0, 5, col='red'))
barplot(stu$grade, ylim = c(0, 5), col='red')
barplot(stu$grade, ylim = c(0, 5), col=rainbow())
barplot(stu$grade, ylim = c(0, 5), col=rainbow(7))
barplot(stu$grade, ylim = c(0, 5), col=rainbow(10))
barplot(stu$grade, ylim = c(0, 5), col=rainbow(100))
barplot(stu$grade, ylim = c(0, 5), col=rainbow(1000))
barplot(stu$grade, ylim = c(0, 5), col=rainbow(7))
barplot(stu$grade, ylim = c(0, 5), col=rainbow(7), main='제목목')
barplot(stu$grade, ylim = c(0, 5), col=rainbow(7), main='제목')
barplot(stu$grade, horiz = T)
barplot(stu$grade, horiz = T, xlab ='학년년') # 가로 막대
barplot(stu$grade, horiz = T, xlab ='학년', ylab='학생') # 가로 막대
barplot(stu$grade, horiz = T, xlab ='학년', ylab='학생', col=(1,2,3)) # 가로 막대
barplot(stu$grade, horiz = T, xlab ='학년', ylab='학생', col=(1,2,3)) # 가로 막대
barplot(stu$grade, horiz = T, xlab ='학년', ylab='학생', col=c(1,2,3)) # 가로 막대
barplot(stu$grade, horiz = T, xlab ='학년', ylab='학생', col=c(4,5,6)) # horiz - 가로 막대, col - 색
par(mfrow=c(1,2))
barplot(stu$grade, horiz = T, xlab ='학년', ylab='학생', col=c(4,5,6), space = 2) # horiz - 가로 막대, col - 색
barplot(stu$grade, horiz = T, xlab ='학년', ylab='학생', col=c(4,5,6), space = 1) # horiz - 가로 막대, col - 색
par(mfrow=c(1,1))
par(mfrow=c(1,2)) # 한 화면에 plot(그래프) 여러 개 출력
barplot(stu$grade)
barplot(stu$grade, horiz = T, xlab ='학년', ylab='학생', col=c(4,5,6), space = 1) # horiz - 가로 막대, col - 색
par(mfrow=c(1,1))
# 점
dotchart(stu$grade)
dotchart(stu$grade, color = 1:5, lcolor = 'black', cex=1.5,pch = 1:2)
# 원
df <- na.omit(stu)
df
# 원
df <- na.omit(stu)
df
pie(df)
pie(df$age, labels = df$age, lty = 1)
pie(df$age, labels = df$age, lty = 2)
# 연속형 데이터에서 효과적인 차트
boxplot(stu$height)
boxplot(stu$height, range=0)
boxplot(stu$height, range=1)
boxplot(stu$height, range=0, notch = T)
aline(h=170,lty=3,col="blue")
abline(h=170,lty=3,col="blue")
hist(stu$height, xlab = 'height', main='히스토그램',xlim=c(150,200), col='yellow')
hist(stu$height, breaks = 5, prob=T)
lines(density(stu$height))
# 산포도(산점도)
price <- runif(10,min = 1, max = 100)
price
plot(price, type = "l")
plot(price, type = "l")
plot(price, type = "o")
plot(price, type = "h")
plot(price, type = "s")
par(mfrow=c(1,1))
head(iris)
pairs(iris[,1:4])
pairs(iris[iris$Species == 'setosa', 1:4])
pairs(iris[,1:4]) # 산점도 행렬 그래프
pairs(iris[iris$Species == 'setosa', 1:4])
pairs(~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris, pch=c(1,2,3)[iris$Species])
# 차트를 그리는(설계하는) 방법 par(), layout()
# layout(mat, widths, heights) : 차트를 표현하는 영역을 grid형태로 분리
par(mar=c(1,1,1,1)) #여백
layout(matrix(c(1,0,2,3)))
plot(iris$Sepal.Length)
hist(iris$Sepal.Width)
boxplot(iris$Sepal.Width)
layout(matrix(c(1,0,2,3)))
layout(matrix(c(2,0,1,3)))
layout(matrix(c(1,0,2,3),2,2,byrow = T)))
#layout(matrix(c(2,0,1,3),2,2,byrow = T),c(2,1),c(2,1))
plot(iris$Sepal.Length)
layout(matrix(c(1,0,2,3),2,2,byrow = T))
#layout(matrix(c(2,0,1,3),2,2,byrow = T),c(2,1),c(2,1))
plot(iris$Sepal.Length)
hist(iris$Sepal.Width)
boxplot(iris$Sepal.Width)
#layout(matrix(c(1,0,2,3),2,2,byrow = T))
layout(matrix(c(2,0,1,3),2,2,byrow = T),c(2,1),c(2,1))
plot(iris$Sepal.Length)
hist(iris$Sepal.Width)
boxplot(iris$Sepal.Width)
layout(matrix(c(1,0,2,3)))
plot(iris$Sepal.Length)
hist(iris$Sepal.Width)
boxplot(iris$Sepal.Width)
layout(matrix(c(1,0,2,3)))
#layout(matrix(c(1,0,2,3),2,2,byrow = T))
layout(matrix(c(2,0,1,3),2,2,byrow = T),c(2,1),c(2,1))
plot(iris$Sepal.Length)
hist(iris$Sepal.Width)
boxplot(iris$Sepal.Width)
install.packages("scatterplot3d")
library("scatterplot3d")
# 붓꽃의 종류별 분류로 3차원 그래프 그리기
levels(iris$Species)
iris
ir.setosa = iris[iris$Species=='setosa', ]
ir.virginica = iris[iris$Species=='virginica', ]
ir.versicolor = iris[iris$Species=='versicolor', ]
# 틀 생성 형식 : scatterplot3d( 밑변，우변칼럼명，좌변칼럼명，type)
irdata <- scatterplot3d(iris$Petal.Length, iris$Sepal.Length, iris$Sepal.Width, type = 'n')
irdata$points3d(ir.setosa$Petal.Length, ir.setosa$Sepal.Length, ir.setosa$Sepal.Width, bg='red', pch=21)
irdata$points3d(ir.virginica$Petal.Length, ir.virginica$Sepal.Length, ir.virginica$Sepal.Width, bg='blue', pch=23)
irdata$points3d(ir.versicolor$Petal.Length, ir.versicolor$Sepal.Length, ir.versicolor$Sepal.Width, bg='yellow', pch=25)
par(mar=c(1,1,1,1))
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
# 붓꽃의 종류별 분류로 3차원 그래프 그리기
levels(iris$Species)
iris
ir.setosa = iris[iris$Species=='setosa', ]
ir.virginica = iris[iris$Species=='virginica', ]
ir.versicolor = iris[iris$Species=='versicolor', ]
# 틀 생성 형식 : scatterplot3d( 밑변，우변칼럼명，좌변칼럼명，type)
irdata <- scatterplot3d(iris$Petal.Length, iris$Sepal.Length, iris$Sepal.Width, type = 'n')
irdata$points3d(ir.setosa$Petal.Length, ir.setosa$Sepal.Length, ir.setosa$Sepal.Width, bg='red', pch=21)
irdata$points3d(ir.virginica$Petal.Length, ir.virginica$Sepal.Length, ir.virginica$Sepal.Width, bg='blue', pch=23)
irdata$points3d(ir.versicolor$Petal.Length, ir.versicolor$Sepal.Length, ir.versicolor$Sepal.Width, bg='yellow', pch=25)
# ggplot2 : plot() 함수를 확장한 라이브러리
library(ggplot2)
data(mpg)
head(mpg,n=3)
ggplot(data = mpg)
ggplot(data = mpg, aes(x = displ))
ggplot(data = mpg, aes(x = displ, y=hwy))
ggplot(data = mpg, aes(x = displ, y=hwy)) + geom_point()
ggplot(data = mpg, aes(x = displ, y=hwy)) + geom_point() + xlim(3,6) + ylim(10,30)
ggplot(data = mpg, aes(x = displ, y=hwy)) + geom_point() + xlim(3,6) + ylim(10,30)
ggplot(data = mpg, aes(x = displ, y=hwy)) + geom_point() + xlim(3,6) + coord_cartesian(ylim=c(0,300))
ggplot(data = mpg, aes(x = displ, y=hwy)) + geom_point() + xlim(3,6) + ylim(10,30)
ggplot(data = mpg, aes(x = displ, y=hwy)) + geom_point()
ggplot(data = mpg, aes(x = displ, y=hwy)) + geom_point() + xlim(3,6) + ylim(10,30)
# dplyr이 지원하는 filter
library(dplyr)
stu <- read.csv("testdata/ex_studentlist.csv")
dplyr::filter(stu, gender == '남남')
dplyr::filter(stu, gender == '남')
filter(stu, gender == '남' | grade == 2)
length(filter(stu, gender == '남' | grade == 2))
arrange(stu, age) # 나이별 정렬
arrange(stu, desc(age))
arrange(stu, grade, age)
select(stu, name, age) # 열 추출
select(stu, name:age)
select(stu, -(name:age))
# %>% 파이프 연산자
stu %>% filter(grade == 1)
select(stu, -(name:age))
# %>% 파이프 연산자
stu %>% filter(grade == 1)
stu %>% filter(grade != 1)
stu %>% filter(height >= 170)
stu %>% filter(grade %in% c(1:2))
stu %>% select(name, bloodtype )
stu %>% filter(grade %in% c(1:2))
library(foreign)
install.packages("readxl")
library(foreign)
library(readxl)
library(ggplot2)
library(dplyr)
pri_welfare <- foreign::read.spss(file = "Koweps_hpc10_2015_beta1.sav", to.data.frame = T)
pri_welfare
pri_welfare
welfare <- ori_welfare
head(welfare)
ori_welfare <- foreign::read.spss(file = "Koweps_hpc10_2015_beta1.sav", to.data.frame = T)
welfare <- ori_welfare
head(welfare)
View(welfare)
names(welfare)
welfare <- rename(welfare,
sex = h10_g3,
birth=h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job=h10_eco9,
code_region=h10_reg7)
welfare
welfare <- rename(welfare,
sex = h10_g3,
birth=h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job=h10_eco9,
code_region=h10_reg7)
welfare
head(welfare)
head(welfare,1)
names(welfare)
welfare$sex
welfare$birth
names(welfare)
welfare$birth
welfare$sex
# 성별에 따른 월급 차이
class(welfare$sex)
table(welfare$sex)
table(is.na(welfare.sex))
table(is.na(welfare$sex))
welfare$sex <- ifelse(welfare$sex == 1, 'male','female')
welfare
welfare$sex
table(welfare$sex)
qplot(welfare$sex)
# income(월급)
class(income)
# income(월급)
class(welfare$income)
qplot(welfare$income)
qplot(welfare$income) + xlim(1,1000)
summary(welfare$income)
welfare$income <- ifelse(welfare$income %in% c(0:9999),NA,welfare$income)
table
table(is.na(welfare$income))
sex_income <- welfare %>% filter(!is.na(income)) %>% group_by(sex) %>% summarise(mean_income = mean(income))
sex_income
ggolot(data = sex_income, aes(x=sex, y=mean_income)) + geom_col()
sex_income <- welfare %>% filter(!is.na(income)) %>% group_by(sex) %>% summarise(mean_income = mean(income))
sex_income
ggolot(data = sex_income, aes(x=sex, y=mean_income)) + geom_col()
ggplot(data = sex_income, aes(x=sex, y=mean_income)) + geom_col()
library(rJava)
# RDBMS와 연동 : RJDBC 패키지 사용 - 자바로 작성됨
install.packages("DBI")
library(rJava)
library(DBI)
library(rJava)
library(DBI)
install.packages("RJDBC")
library(RJDBC)
# 개인용 데이터베이스 SQLite
install.packages("RSQLite")
library(RSQL)
library(RSQLite)
mtcars
names(mtcars)
is(mtcars)
conn <- dbConnect(RSQLite::SQLite(),":memory:")
conn
dbWriteTable(conn = conn, name = "mtcars", mtcars)
dbListTables()
dbListTables(conn)
dbWriteTable(conn = conn, name = "iris", iris)
dbListTables(conn) # 테이블 목록 보기
query <- "select * from mtcars"
sql <- "select * from mtcars"
goodsAll <- dbGetQuery(conn, sql)
goodsAll
sql <- "select mpg, cyl, gear from mtcars where mpg > 30"
goosAll <- dbGetQuery(conn,sql)
goodsAll
sql <- "select mpg, cyl, gear from mtcars where mpg > 30"
goosAll <- dbGetQuery(conn,sql)
goodsAll
sql <- "select mpg, cyl, gear from mtcars where mpg > 30"
goodsAll <- dbGetQuery(conn,sql)
goodsAll
dbDisconnect(conn)
dbDisconnect(conn) # 연결 해제제
# -----원격 Database (MariaDB) -------------------------------------
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver", classPath = "mariadb-java-client-2.6.2.jar")
drv
conn <- dbConnect(drv = drv, "jdbc:mysql://127.0.0.1:3306/test","root","123")
conn
dbListTables(conn)
sangAll <- dbGetQuery(conn,sql2)
sangAll
conn <- dbConnect(drv = drv, "jdbc:mysql://127.0.0.1:3306/test","root","123")
conn
dbListTables(conn)
sql2 = "select * from sangdata"
sangAll <- dbGetQuery(conn,sql2)
sangAll
is(sangAll)
mean(sangAll$su)
barplot(sangAll$su)
barplot(sangAll$su, col = rainbow())
barplot(sangAll$su, col = rainbow(1,2,3))
barplot(sangAll$su, col = rainbow(5))
barplot(sangAll$su, col = rainbow(5), names.arg = sangAll$sang)
sql2 = "select * from sangdata where sang like '가죽%'"
sangAll <- dbGetQuery(conn,sql2)
sangAll
sql2 = "select code, sang from sangdata order by desc"
sangAll <- dbGetQuery(conn,sql2)
sangAll
sql2 = "select code, sang from sangdata order by code desc"
sangAll <- dbGetQuery(conn,sql2)
sangAll
dbSendUpdate(conn, isql)
# 레코드 추가
isql = "insert into sangdata values(12, '선물' , 5, 5000)"
dbSendUpdate(conn, isql)
df <- data.frame(code=13, sang='종이컵',su=12, dan=100)
df
df <- data.frame(code=13, sang='종이컵',su=12, dan=100)
df
dbSendUpdate(conn, "insert into sangdata values(?,?,?,?)", df$code, df$sang, df$su, df$dan)
dbGetQuery(conn,"select * from sangdata")
#레코드 수정
usql = "update sangdata set sang='연습', su = 77 where code=13"
dbSendQuery(conn, usql)
dnSendUpdate(conn, "update sangdata set sang=? where code=13","컴퓨터")
dbGetQuery(conn,"select * from sangdata")
# 레코드 삭제
dbSendUpdate(conn, "delete from sangdata where code=?",13)
dbGetQuery(conn, "select * from sangdata")
# 레코드 추가시 data.frame에 있는 여러개의 행(관측값)이 있는 경우 함수를 작성해서 처리
paste("Hi","everybody")
paste("Hi","everybody")
#레코드 수정
usql = "update sangdata set sang='연습', su = 77 where code=13"
dbSendQuery(conn, usql)
dbSendUpdate(conn,"update sangdata set sang=? where code=13","컴퓨터")
dbGetQuery(conn,"select * from sangdata")
sangdf <- read.csv('sangpum.csv', header = T)
# 레코드 추가시 data.frame에 있는 여러개의 행(관측값)
library(dplyr) # %>% 사용
sangdf <- read.csv('sangpum.csv', header = T)
sangdf <- read.csv('sangpum.csv', header = T, fileEncoding = "UTF-8")
sangdf <- read.csv('sangpum.csv', header = T, fileEncoding = "UTF-8")
sangdf
func <- function(conn, table,df){
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse=",")) %>% paste0("(",.,")", collapse=",\n")
batch
}
func(conn, "sangdata", sangdf)
func <- function(conn, table,df){
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse=",")) %>% paste0("(",.,")", collapse=",\n")
#batch "('100','자바','3','25000'),\n('101','오라클','13','35000'),\n('102','파이썬','23','45000')"
sql <- paste("insert into", table, "value", batch) # sql문을 완성
}
func(conn, "sangdata", sangdf)
func <- function(conn, table,df){
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse=",")) %>% paste0("(",.,")", collapse=",\n")
#batch "('100','자바','3','25000'),\n('101','오라클','13','35000'),\n('102','파이썬','23','45000')"
sql <- paste("insert into", table, "value", batch) # sql문을 완성
dbSendUpdate(conn,sql)
}
func(conn, "sangdata", sangdf)
dbGetQuery(conn,"select * from sangdata")
